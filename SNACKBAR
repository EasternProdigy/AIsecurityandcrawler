public class Main {
	public static void main(String[] args){
		SnackBar.main(args);
	}
}

/**
 * The SnackBar program models several "vending machines"
 */
 
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.Box;
import javax.swing.JPasswordField;
import javax.swing.JOptionPane;

public class SnackBar extends JFrame
                      implements ActionListener
{
  private static final String MY_PASSWORD = "jinx";
  private VendingMachine[] machines;

  public SnackBar()
  {
    super("Snack Bar");

    // Load the coin icon for the vending machine buttons:
    ImageIcon coin = new ImageIcon("coin.gif");

    Color brandColor1 = new Color(130, 30, 10); // r, g, b
    Color brandColor2 = new Color(255, 180, 0);
    Color brandColor3 = new Color(90, 180, 0);

    VendingMachine[] machines =
    {
      new VendingMachine("Java", brandColor1, 45, coin),
      new VendingMachine("JApple", brandColor2, 50, coin),
      new VendingMachine("Jinx", brandColor3, 35, coin)
    };
    this.machines = machines;
    
    int w = machines.length * (200+5);
    int h = 310;
    setMinimumSize(new Dimension(w, h));

    Box wall = Box.createHorizontalBox();
    wall.add(Box.createHorizontalStrut(5));
    for (VendingMachine machine : machines)
    {
      wall.add(machine);
      wall.add(Box.createHorizontalStrut(5));
    }

    JPanel service = new JPanel();
    service.add(new JLabel(" Service login: "));
    JPasswordField password = new JPasswordField("", 5);
    password.addActionListener(this);
    service.add(password);

    Container c = getContentPane();
    c.setBackground(Color.GRAY);
    c.add(wall, BorderLayout.CENTER);
    c.add(service, BorderLayout.SOUTH);
  }

  /**
   * Password field: user strikes <Enter>
   */
  public void actionPerformed(ActionEvent e)
  {
    JPasswordField password = (JPasswordField)e.getSource();
    String word = new String(password.getPassword());
    password.setText("");
    if (MY_PASSWORD.equals(word))
    {
      for (VendingMachine machine : machines)
        machine.reload();
        
      JOptionPane.showMessageDialog(null,
        "Machines reloaded",
        "Service", JOptionPane.INFORMATION_MESSAGE);
    }
    else
    {
      JOptionPane.showMessageDialog(null,
        "Login failed", "Service", JOptionPane.ERROR_MESSAGE);
    }
  }

  // *****************************************************

  public static void main(String[] args)
  {
    SnackBar window = new SnackBar();
    window.setLocation(50, 50);
    window.setDefaultCloseOperation(EXIT_ON_CLOSE);
    window.setVisible(true);
  }
}

import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.Box;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

public class VendingMachine extends JPanel
                            implements ActionListener
{
  private static final int FULL_STOCK = 5;
  private JButton deposit25c, deposit10c, deposit5c, go;
  private JTextField display;
  private Vendor vendor;
  boolean trayFull;
  Color brandColor;
  String brandName;

  public VendingMachine(String brand, Color color, int price, ImageIcon coin)
  {
    setBackground(Color.WHITE);
    brandColor = color;
    brandName = brand;

    JTextField banner = new JTextField("  " + brandName +
                                       "  " + price + "c  ");
    banner.setEditable(false);
    banner.setFont(new Font("Serif", Font.BOLD, 14));
    banner.setHorizontalAlignment(JTextField.CENTER);

    deposit25c = new JButton(" 25 ", coin);
    deposit25c.addActionListener(this);
    deposit10c = new JButton(" 10 ", coin);
    deposit10c.addActionListener(this);
    deposit5c = new JButton("  5 ", coin);
    deposit5c.addActionListener(this);
    go = new JButton("Buy");
    go.setBackground(Color.PINK);
    go.addActionListener(this);
    JPanel buttons = new JPanel(new GridLayout(3, 1, 5, 0));
    buttons.setBackground(Color.BLUE);
    buttons.add(deposit25c);
    buttons.add(deposit10c);
    buttons.add(deposit5c);

    display = new JTextField("0  ");
    display.setFont(new Font("Monospaced", Font.BOLD, 16));
    display.setBackground(Color.YELLOW);
    display.setEditable(false);
    display.setHorizontalAlignment(JTextField.RIGHT);

    Box b1 = Box.createVerticalBox();
    b1.add(banner);
    b1.add(Box.createVerticalStrut(5));
    b1.add(display);
    b1.add(Box.createVerticalStrut(12));
    Box b2 = Box.createHorizontalBox();
    b2.add(Box.createHorizontalStrut(60));
    Box b3 = Box.createVerticalBox();
    b3.add(go);
    b3.add(Box.createVerticalStrut(8));
    b3.add(buttons);
    b2.add(b3);
    b1.add(b2);
    b1.add(Box.createVerticalStrut(5));
    add(b1);

    vendor = new Vendor(price, FULL_STOCK);
  }

  public void reload()
  {
    vendor.setStock(FULL_STOCK);
    display.setText(" " + vendor.getDeposit() + "  ");
    repaint();
  }

  public void actionPerformed(ActionEvent e)
  {
    JButton b = (JButton)e.getSource();

    if (b == deposit25c)
      vendor.addMoney(25);
    else if (b == deposit10c)
      vendor.addMoney(10);
    else if (b == deposit5c)
      vendor.addMoney(5);
    else if (b == go)
    {
      trayFull = vendor.makeSale();
      int change = vendor.getChange();
      if (trayFull)          // Successful sale
      {
        repaint();
        JOptionPane.showMessageDialog(null,
          "Enjoy your " + brandName + "\n" + " Change " + change + "c",
          "Enjoy " + brandName, JOptionPane.PLAIN_MESSAGE);
        trayFull = false;
      }
      else if (change > 0)   // Refund
      {
        JOptionPane.showMessageDialog(null,
          "Take " + change + "c back",
          "Money back", JOptionPane.ERROR_MESSAGE);
      }
    }

    if (vendor.getStock() > 0)
      display.setText(" " + vendor.getDeposit() + "  ");
    else
      display.setText("Call service ");

    repaint();
  }

  public void paintComponent(Graphics g)
  {
    super.paintComponent(g);

    final int x0 = getWidth() / 12;
    final int y0 = getHeight() / 2;
    final int yStep = 14;

    g.setColor(Color.BLACK);
    g.drawRect(x0, y0, 28, FULL_STOCK * yStep + 4);

    int y = y0 + 4, x = x0 + 4;
    int stock = vendor.getStock();
    int count = FULL_STOCK;

    while (count > 0)
    {
      if (count <= stock)
        drawCan(g, x, y);
      y += yStep;
      count--;
    }

    g.setColor(Color.BLUE);
    y += yStep;
    g.drawRect(x0, y - 4, 28, 18);

    if (trayFull)
      drawCan(g, x, y);
  }

  private void drawCan(Graphics g, int x, int y)
  {
    g.setColor(brandColor);
    g.fillRoundRect(x, y, 20, 10, 4, 4);
    g.setColor(Color.WHITE);
    g.drawLine(x + 2, y + 4, x + 14, y + 4);
    g.drawLine(x + 2, y + 6, x + 14, y + 6);
  }
}

/**
 * This class implements a vendor that sells one kind
 * of items. A vendor carries out sales transactions.
 */
public class Vendor
{
private int price;
private int stock;
private int deposit;
private int change;
  // Fields:
 
  /**
   * Constructs a Vendor
   * @param pr the price of a single item in cents (int)
   * @param st number of items to place in stock (int)
   */
  public Vendor(int pr, int st)
  {
    price = pr;
    stock = st;
  }

  /**
   * Sets the quantity of items in stock.
   * @param qty number of items to place in stock (int)
   */
  public void setStock(int qty)
  {
    stock = qty;
  }

  /**
   * Returns the number of items currently in stock.
   * @return number of items currently in stock (int)
   */
  public int getStock()
  {
    return stock;
  }

  /**
   * Adds a specified amount (in cents) to the
   * deposited amount.
   * @param number of cents to add to the deposit (int)
   */
  public void addMoney(int cents)
  {
    deposit +=  cents;
  }

  /**
   * Returns the currently deposited amount (in cents).
   * @return number of cents in the current deposit (int)
   */
  public int getDeposit()
  {
    return deposit;
  }

  /**
   * Implements a sale.  If there are items in stock and
   * the deposited amount is greater than or equal to
   * the single item price, then adjusts the stock and
   * calculates and sets change, sets deposit to 0 and
   * returns true; otherwise refunds the whole deposit
   * (moves it into change) and returns false.
   * @return true for a successful sale, false otherwise (boolean)
   */
  public boolean makeSale()
  {
    if ((stock > 0) && (deposit >= price)) {
    stock--;
    change = deposit - price;
    deposit = 0;
    return true;
    } else {
    change = deposit;
    return false;
    }
  }

  /**
   * Returns and zeroes out the amount of change (from
   * the last sale or refund).
   * @return number of cents in the current change (int)
   */
  public int getChange()
  {
    return change;
  }
}
